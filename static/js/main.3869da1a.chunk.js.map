{"version":3,"sources":["AddItem.js","ShowList.js","LfConfig.js","App.js","serviceWorker.js","index.js"],"names":["AddItem","props","state","item","marca","quant","handleChange","bind","event","this","setState","target","name","value","onSubmit","e","submitItens","type","onChange","React","Component","ShowItens","onClick","itemDelete","updateItem","itens","map","key","id","data","btUpdate","btDelete","getList","LocalForage","setDriver","INDEXEDDB","App","produto","handleSubmit","updateList","arrList","iterate","index","push","then","catch","err","console","log","Date","now","setItem","toString","preventDefault","filter","elm","arrUpdates","prompt","split","removeItem","nmItem","alert","ShowList","handleUpdate","handleDelete","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3869da1a.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass AddItem extends React.Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            item: '',\n            marca: '',\n            quant: ''\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {         \n        \n        this.setState({\n            [event.target.name] : event.target.value\n        })    \n      }\n   \n    render() {\n        return (\n            <form onSubmit={(e)=>this.props.submitItens(this.state, e)}>\n                <label>\n                    Item:\n                    <input\n                        name=\"item\"\n                        type=\"text\"\n                        value={this.state.item}\n                        onChange={this.handleChange}\n                    />\n                </label> <br/>\n                <label>\n                    Marca:\n                    <input\n                        name=\"marca\"\n                        type=\"text\"\n                        value={this.state.marca}\n                        onChange={this.handleChange}\n                    />\n                </label><br/>\n                <label>\n                    Quantidade:\n                    <input\n                        name=\"quant\"\n                        type=\"text\"\n                        value={this.state.quant}\n                        onChange={this.handleChange}\n                    />\n                </label><br/>\n                <input type=\"submit\" value=\"Adicionar\" />\n            </form>\n        )\n    }\n}\n\nexport default AddItem;","import React from 'react';\n\nclass ShowItens extends React.Component{\n    btDelete(item){\n        return <button onClick={(e)=>this.props.itemDelete(item, e)} >x</button>\n    }\n\n    btUpdate(item){\n        return<button onClick={(e)=>this.props.updateItem(item, e)}>E</button>\n    }\n    \n    getList(){\n        let strList = this.props.itens;\n        return strList.map(item=>{\n            return <li key={item.id}> \n                { item.data.item } | \n                { item.data.marca } | \n                { item.data.quant } \n                {this.btUpdate(item.id)}\n                {this.btDelete(item.id) }\n            </li>\n        })\n    }\n\n    render(){\n        return(            \n            <ul>\n                {this.getList()}\n            </ul>            \n        );\n    }\n}\n\nexport default ShowItens;","import LocalForage from 'localforage';\n\nLocalForage.setDriver([LocalForage.INDEXEDDB]);\n\nexport default LocalForage;\n","import React from 'react';\nimport './App.css';\nimport AddItem from './AddItem';\nimport ShowList from './ShowList';\nimport LocalForage from './LfConfig';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    \n    this.state = {\n      itens: [],\n      produto:{\n        item:'',\n        marca:'',\n        quant: '',\n      }\n    }    \n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateList();\n  }\n\n  //componentWillUnmount() {  }\n\n  updateList() {\n    let arrList = [];\n    LocalForage.iterate((value, key, index) => {\n      arrList.push({ id: key, data: value });\n    })\n      .then(() => this.setState({ itens: arrList }))\n      .catch(err => console.log('Ops! aconteceu um erro' + err));\n  }\n\n  \n\n  handleSubmit(itens, event) {\n    console.log(itens);\n    \n    let id = Date.now();\n    LocalForage.setItem(id.toString(), itens)\n      .then(() => {\n        this.updateList();\n        event.preventDefault();        \n      }).catch(err => console.log(err));\n  }\n\n  handleUpdate(item) {\n    let [produto]=this.state.itens.filter(elm=>elm.id === item);\n    let updates = prompt('Digite o que deseja alterar neste item: ', `${produto.data.item}, ${produto.data.marca}, ${produto.data.quant}`)\n    let arrUpdates = updates.split(',');\n    LocalForage.setItem(item, {\n      item: arrUpdates[0],\n      marca: arrUpdates[1],\n      quant: arrUpdates[2]\n\n    }).then(()=>this.updateList());\n  }\n\n  handleDelete(item) {\n    LocalForage.removeItem(item)\n    .then(()=>{\n      this.updateList();\n    }).catch(err=>{\n      console.log(err);      \n    })\n    let [nmItem] = this.state.itens.filter(elm=>elm.id === item);\n    console.log(nmItem);\n    \n    alert('Delete o Item ' + nmItem.data.item );\n  }\n\n  render() {\n    return (\n      <div>\n        <AddItem\n          item={this.state.produto}\n          submitItens={(itens)=>this.handleSubmit(itens)} />\n        <ShowList\n          itens={this.state.itens}\n          updateItem={(item) => this.handleUpdate(item)}\n          itemDelete={(item) => this.handleDelete(item)}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}